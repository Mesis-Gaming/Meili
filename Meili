-- Services and Variables
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local Camera = workspace.CurrentCamera

-- Configuration
getgenv().SilentEnabled = true
getgenv().ManipulationEnabled = true
local FOVSettings = {
    Enabled = true,
    Radius = 30,
    Angle = 1,
    Snapline = true,
    Manipulation = true
}

-- Visual Elements
local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 1.5
FOVCircle.NumSides = 30
FOVCircle.Radius = FOVSettings.Radius
FOVCircle.Color = Color3.new(1, 1, 1)
FOVCircle.Filled = false
FOVCircle.Visible = FOVSettings.Enabled

local Snapline = Drawing.new("Line")
Snapline.Thickness = 1
Snapline.Color = Color3.new(1, 0, 0)
Snapline.Visible = FOVSettings.Snapline

-- Prediction Function
local function GetProjectileInfo()
    local projectileSpeed = 1000
    local projectileDrop = 0.5
    return projectileSpeed, projectileDrop
end

local function Predict(Player, Velocity)
    local PSpeed, PDrop = GetProjectileInfo()
    if PSpeed and PDrop then
        local Dist = (Player.Position - Camera.CFrame.Position).Magnitude
        local TimeToHit = Dist / PSpeed
        local PPos1 = Player.Position + (Velocity * TimeToHit * 3.4)
        local Drop = -PDrop ^ (TimeToHit * PDrop) + 1.1
        local PPos = PPos1 - Vector3.new(0, Drop, 0)
        return PPos, TimeToHit
    end
    return Vector3.new(0, 0, 0), nil
end

-- Get Closest Player
local function GetPlayer()
    local closest, closestMagnitude = nil, math.huge
    for _, v in pairs(game.Players:GetPlayers()) do
        if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Head") then
            local PartPos, OnScreen = Camera:WorldToViewportPoint(v.Character.Head.Position)
            local Magnitude = (Vector2.new(PartPos.X, PartPos.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude
            if Magnitude < FOVSettings.Radius and Magnitude < closestMagnitude and OnScreen then
                closestMagnitude = Magnitude
                closest = v.Character
            end
        end
    end
    return closest
end

-- Manipulation and Target Adjustment
local function calculateBestOffset(Target)
    local bestDirection = "Normal"
    local bestOffset = Vector3.new()
    for angle = 0, 360, 15 do
        local radianAngle = math.rad(angle)
        for xOffset = 1, 3 do
            for yOffset = -4, 4 do
                local x = math.cos(radianAngle) * xOffset
                local offset = Vector3.new(x, yOffset, 0)
                if Target and Target:FindFirstChild("Head") and Camera:WorldToViewportPoint(Target.Head.Position + offset) then
                    bestDirection = angle
                    bestOffset = offset
                    return bestDirection, bestOffset
                end
            end
        end
    end
    return bestDirection, bestOffset
end

-- Update Visuals
RunService.RenderStepped:Connect(function()
    if FOVSettings.Enabled then
        -- Center the FOV Circle in the middle of the screen
        FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        FOVCircle.Visible = true
    else
        FOVCircle.Visible = false
    end

    if FOVSettings.Snapline then
        local Target = GetPlayer()
        if Target and Target:FindFirstChild("Head") then
            local HeadPos = Camera:WorldToViewportPoint(Target.Head.Position)
            Snapline.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
            Snapline.To = Vector2.new(HeadPos.X, HeadPos.Y)
            Snapline.Visible = true
        else
            Snapline.Visible = false
        end
    else
        Snapline.Visible = false
    end
end)

-- Silent Aim Hook
local OldHook
OldHook = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = { ... }

    if getgenv().SilentEnabled and tostring(method) == "Raycast" then
        local Target = GetPlayer()
        if Target and Target:FindFirstChild("Head") then
            local PredictedPos, _ = Predict(Target.Head, Vector3.new(0, 0, 0)) -- Velocity can be added
            args[2] = PredictedPos - Camera.CFrame.Position
        end
    end

    return OldHook(self, unpack(args))
end)

-- Toggle Functionality
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.B then
        getgenv().SilentEnabled = not getgenv().SilentEnabled
        FOVSettings.Enabled = not FOVSettings.Enabled
        FOVSettings.Snapline = not FOVSettings.Snapline
        print("Silent Aim Toggled:", getgenv().SilentEnabled)
    end
end)
