-- Global flags for settings
getgenv().SilentAimEnabled = true
getgenv().ManipulationEnabled = true
getgenv().SnaplineEnabled = true
getgenv().FOVCircleEnabled = true
getgenv().FOVRadius = 30
getgenv().ManipulationAngles = 1
getgenv().ManipulationRadius = 6

-- Services and Variables
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- FOV Circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Radius = getgenv().FOVRadius
FOVCircle.Color = Color3.fromRGB(45, 116, 202)
FOVCircle.Thickness = 1.5
FOVCircle.Visible = getgenv().FOVCircleEnabled

-- Snapline
local Line = Drawing.new("Line")
Line.Color = Color3.fromRGB(255, 255, 255)
Line.Thickness = 1.5
Line.Visible = getgenv().SnaplineEnabled

-- Function to find the closest target
local function GetPlayer()
    local closest = nil
    local closestMagnitude = math.huge
    local playerTable = nil

    for _, v in pairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Head") then
            local partPosition, onScreen = Camera:WorldToViewportPoint(v.Character.Head.Position)
            local partVector2 = Vector2.new(partPosition.X, partPosition.Y)
            local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

            local Magnitude = (partVector2 - screenCenter).Magnitude
            local PlayerDistance = (workspace.Ignore.LocalCharacter.Middle:GetPivot().Position - v.Character:GetPivot().Position).Magnitude

            if Magnitude < FOVCircle.Radius and PlayerDistance <= 9999 and Magnitude < closestMagnitude and onScreen then
                closestMagnitude = Magnitude
                closest = v
                playerTable = v
            end
        end
    end

    return closest, playerTable
end

-- Function to handle aiming
local function AimAtTarget(target)
    if target and target.Character and target.Character:FindFirstChild("Head") then
        local headPosition = target.Character.Head.Position
        local predictedPosition = headPosition -- Can add prediction logic here if needed
        if predictedPosition then
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, predictedPosition)
        end
    end
end

-- Main loop
game:GetService("RunService").RenderStepped:Connect(function()
    if getgenv().SilentAimEnabled then
        local target, playerTable = GetPlayer()

        if target then
            if getgenv().ManipulationEnabled then
                -- Adjust aim with manipulation settings
                local manipulationFactor = getgenv().ManipulationAngles
                local adjustedTargetPosition = target.Character.Head.Position + Vector3.new(
                    math.random(-manipulationFactor, manipulationFactor),
                    math.random(-manipulationFactor, manipulationFactor),
                    math.random(-manipulationFactor, manipulationFactor)
                )
                AimAtTarget({Character = {Head = {Position = adjustedTargetPosition}}})
            else
                AimAtTarget(target)
            end

            -- Draw snapline
            if getgenv().SnaplineEnabled and target.Character:FindFirstChild("Head") then
                local headScreenPos = Camera:WorldToViewportPoint(target.Character.Head.Position)
                Line.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                Line.To = Vector2.new(headScreenPos.X, headScreenPos.Y)
                Line.Visible = true
            else
                Line.Visible = false
            end
        else
            Line.Visible = false
        end
    end

    -- Update FOV Circle
    FOVCircle.Radius = getgenv().FOVRadius
    FOVCircle.Visible = getgenv().FOVCircleEnabled
end)
